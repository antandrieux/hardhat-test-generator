#!/usr/bin/env node

/**
 * antandrieux - Hardhat Test Generator
 */

const fs = require('fs');
const { Command } = require('commander');
const program = new Command();
const CWD = process.cwd();

const ABI_FILES_PATH = CWD + `/artifacts/contracts`;
const OUTPUT_PATH = CWD + `/test`;

const getExampleValueFromType = (type) => {
	switch (type) {
		case 'address':
			return 'account1.address';
		case 'uint256':
			return '0';
		case 'bool':
			return 'true';
		case 'string':
			return '"test"';
		default:
			return '0';
	}
};

function getParamsOfFunction(elem, elementsInABI) {
	let paramsOfFunction = '';
	for (let i = 0; i < elem.inputs.length; i++) {
		if (i > 0) paramsOfFunction += ', ';
		paramsOfFunction += elem.inputs[i].name;
		elem.inputs[i]['value'] = getExampleValueFromType(elem.inputs[i].type);
	}
	elem['paramsOfFunction'] = paramsOfFunction;
}

const getElementsInABI = (contract) => {
	let elementsInABI = { functions: [] };
	for (let elem of contract.abi) {
		if (elem.type == 'constructor') {
			getParamsOfFunction(elem, elementsInABI);
			elementsInABI['constructor'] = elem;
		} else if (elem.type == 'function') {
			getParamsOfFunction(elem, elementsInABI);
			elementsInABI['functions'].push(elem);
		}
	}
	return elementsInABI;
};

const getDetailedFunction = (func, contractName) => {
	let functionText;
	if (func.name == 'safeTransferFrom' && func.inputs.length == 3) {
		functionText = `
			await ${contractName.toLowerCase()}.connect(owner)['safeTransferFrom(address,address,uint256)'](${
			func['paramsOfFunction']
		});`;
	} else if (func.name == 'safeTransferFrom' && func.inputs.length == 4) {
		functionText = `
			await ${contractName.toLowerCase()}.connect(owner)['safeTransferFrom(address,address,uint256,bytes)'](${
			func['paramsOfFunction']
		});`;
	} else {
		functionText = `
			await ${contractName.toLowerCase()}.connect(owner).${func.name}(${
			func['paramsOfFunction']
		});`;
	}
	return functionText;
};

const generateTests = (contractName, elementsInABI) => {
	let testsText = `/**
 * This file was generated by @antandrieux/hardhat-test-generator.
 * 
 * This provides a baseline for writing your own 
 * unit tests by listing all public (or external) 
 * functions with all their arguments. The goal is 
 * to speed up the initialization process of unit 
 * tests and not to miss any function in smart 
 * contracts.
 * 
 * MAKE SURE TO UPDATE THE VALUES OF THE ARGUMENTS 
 * OF THE CONSTRUCTOR AND THE FUNCTIONS.
 */

const { ethers } = require('hardhat');
const { expect, assert } = require('chai');


describe('${contractName}', () => {
  const CONTRACT_NAME = '${contractName}';`;

	testsText += `

  beforeEach(async () => {
		[owner, account1, account2, account3] = await ethers.getSigners();
	`;

	if (elementsInABI['constructor'].inputs) {
		testsText += `
		// To change`;
		for (let input of elementsInABI['constructor'].inputs) {
			testsText += `
  	const ${input.name} = ${input.value};`;
		}
	}

	testsText += `

    const ${contractName} = await ethers.getContractFactory(CONTRACT_NAME);

    ${contractName.toLowerCase()} = await ${contractName}.deploy(${
		elementsInABI.constructor['paramsOfFunction']
	});
    await ${contractName.toLowerCase()}.deployed();
  })
`;

	for (let func of elementsInABI.functions) {
		testsText += `
  describe("Test ${func.name}", async () => {
    it('Should test ${func.name}', async () => {

    	${func.inputs
				.map((input) => 'let ' + input.name + ' = ' + input.value + ';')
				.join('\n\t\t\t')} 
		${getDetailedFunction(func, contractName)}
    })
  })
`;
	}

	testsText += `})
`;
	return testsText;
};

const createTestFiles = (contractName, options) => {
	if (contractName.includes('.sol')) {
		contractName = contractName.replace('.sol', '');
	}
	const ABI_FILE = `${ABI_FILES_PATH}/${contractName}.sol/${contractName}.json`;
	let outputFile = `${OUTPUT_PATH}/${contractName}`;
	let contract;

	try {
		contract = JSON.parse(fs.readFileSync(ABI_FILE, 'utf8'));
	} catch (err) {
		console.error(
			'Please provide a correct contract name (the file name must have the same name as the contract name) and be in the top level directory of your Hardhat project.\n',
			err
		);
		return err;
	}

	const elementsInABI = getElementsInABI(contract);
	const testsText = generateTests(contract.contractName, elementsInABI);

	if (options.new) {
		let i = 0;
		let fileWritten = false;
		let tempOutputFile;
		do {
			tempOutputFile =
				i == 0 ? outputFile + '.test.js' : outputFile + `_${i}.test.js`;
			console.log(tempOutputFile);
			if (fs.existsSync(tempOutputFile)) {
				i++;
			} else {
				outputFile = tempOutputFile;
				fileWritten = true;
			}
		} while (!fileWritten);
	} else {
		outputFile += '.test.js';
		if (fs.existsSync(outputFile)) {
			fs.rmSync(outputFile);
		}
	}

	fs.writeFile(outputFile, testsText, (error) => {
		if (error) return console.error(error);
	});

	console.log('Hardhat unit tests generated in: ', outputFile);
};

program
	.description(
		`Generate unit tests files in a Hardhat project.\n
This provides a baseline for writing your own unit tests by 
listing all public (or external) functions with all their 
arguments. The goal is to speed up the initialization 
process of unit tests and not to miss any function in smart 
contracts. Please provide a contract name and be in the top 
level directory of your Hardhat project.`
	)
	.option('-c, --contract <contract_name>', 'generate for a specific contract')
	.option('-n, --new', 'add a new file at each generation')
	.action((options) => {
		if (options.contract) createTestFiles(options.contract, options);
		else {
			fs.readdirSync(ABI_FILES_PATH).map((i) => {
				// Ignore files that start with I, we consider them as interfaces and we don't want to test them
				if (i[0] === 'I') return;

				fs.readdirSync(`${ABI_FILES_PATH}/${i}`)
					.filter((j) => j.includes('.json') && !j.includes('.dbg.json'))
					.map((j) => {
						createTestFiles(j.replace('.json', ''), options);
					});
			});
		}
	});

program.parse();
